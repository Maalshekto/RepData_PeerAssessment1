pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
header(volcano)
head(volcano)
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(mpg$displ, mpg$hwy, mpg)
qplot(mpg$displ, mpg$hwy, mpg
)
d
0
qplot(mpg$displ, mpg$hwy, data = mpg
)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
head(myhigh)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth", facets = . ~drv, method = "loess")
)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv, method = "loess")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv,method="loess")
0
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
library(swirl())
quit
quit()
swirl()
library(swirl)
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
uninstall_course(course_name = "Exploratory Data Analysis GGPlot2 Part2")
uninstall_course(course_name = "Exploratory Data Analysis")
install_course_directory(path = "swirl_courses-master/Exploratory_Data_Analysis/")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = . ~drv)
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
View(ask)
palette()
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
colorVector
colorVector <- ask$ANTI.SKIMMING.RESULT
colorVector
source("anti_skimming_measurement.R")
colorVector <- askData$ANTI.SKIMMING.RESULT
colorVector
colorVector <- askData$ANTI.SKIMMING.RESULT == "NO"
colorVector
colorVector <- askData$ANTI.SKIMMING.RESULT == "NO"
colorVector <- askData$ANTI.SKIMMING.RESULT == "YES"
colorVector <- askData$ANTI.SKIMMING.RESULT == "NO"
ls
colorVector
colorVector <- colorVector
colorVector
rep(25, 1)
rep(1, 25)
col = rep(1, 25)
col[colorVector] = col[colorVector] + rep(1, 25)
col[colorVector] = col[colorVector] + rep(1, 25)[colorVector]
col
col = rep(1, 25)
col[colorVector] = col[colorVector] + rep(1, 25)[colorVector]
col
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
?palette
topo.colors(12)
?colorRamp("blue", red)
?colorRamp("blue", "red")
colorRamp("blue", "red", )
colorRamp("blue", "red", 5)
colorRamp(c("blue", "red"), 5)
colorRamp(c("blue", "red"))
colorRampPalette(c("blue", "red"))
colorRampPalette(c("blue", "red"), 10)
colorRamp(c("blue", "red"), 10)
cols<-brewer.pal(6,"Set1")
library("ggplot")
library("ggplot2")
cols<-brewer.pal(6,"Set1")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
prefixFilename <- "other"
?lockBinding
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
unlockBinding("prefixFilename", globalenv())
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
paste(prefixFilename, "toto")
paste(prefixFilename, format(Sys.time(), "%d%m%y%H%M%S"), ".pdf", sep = "")
source("anti_skimming_measurement.R")
unlockBinding("prefixFilename", globalenv())
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
library(quantmod)
getSymbols(’GE’,src=’yahoo’, from="2000-01-01", to="2009-12-30")
getSymbols('GE',src=’yahoo’, from="2000-01-01", to="2009-12-30")
getSymbols('GE',src='yahoo', from="2000-01-01", to="2009-12-30")
GE
GE["2000-01-01/2000-01-20"]
geAdj <- GE$GE.Adjusted["2000-01-01/2000-01-20]"]; geAdj;
max(geAdj)
min(geAdj)
mean(geAdj)
chartSeries(GE)
chartSeries(GE, TA = NULL, subset = '2001-01::2001-02')
chartSeries(GE, subset = '2001-01::2001-02')
chartSeries(GE, TA = NULL, subset = '2001-01::2001-02')
saveRDS(GE, file = "GE.rds")
chartSeries(GE, TA = NULL, subset = '2001-08::2001-10')
chartSeries(GE,  subset = '2001-08::2001-10')
addTA(.xts(TRUE,.index(IBM.m)[24]), on=1)
addTA(.xts(TRUE,.index(GE.m)[24]), on=1)
addTA(.xts(TRUE,.index(GE)[24]), on=1)
chartSeries(GE,  subset = '2001-08::2001-10')
getSymbols('GE',src='yahoo', from="2010-01-01", to="2016-12-30")
getSymbols('GE',src='yahoo', from="2010-01-01", to="2015-12-30")
getSymbols('GE',src='yahoo', from="2010-01-01", to="2010-12-30")
getSymbols('GE',src='yahoo', from="2000-01-01", to="2009-12-30")
getSymbols('GE',src='yahoo', from="2010-01-01", to="2015-12-30")
getSymbols('GE',src='yahoo', from="2010-01-01", to="2016-02-15")
chartSeries(GE,  subset = '2016-01::2016-02')
getSymbols('CLH16',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('CLH',src='yahoo', from="2010-01-01", to="2016-02-15")
chartSeries(GE,  subset = '2016-01::2016-02')
chartSeries(CLH,  subset = '2016-01::2016-02')
chartSeries(CLH16.NYM,  subset = '2016-01::2016-02')
getSymbols('CLH16.NYM',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('WTI',src='yahoo', from="2010-01-01", to="2016-02-15")
chartSeries(CLH16.NYM,  subset = '2016-01::2016-02')
chartSeries(WTI,  subset = '2016-01::2016-02')
chartSeries(XAUUSD,  subset = '2016-01::2016-02')
getSymbols('XAUUSD',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('XAU',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('XAUUSD = X',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('XAU/USD',src='yahoo', from="2010-01-01", to="2016-02-15")
getSymbols('GLD',src='yahoo', from="2010-01-01", to="2016-02-15")
chartSeries(GLD,  subset = '2016-01::2016-02')
getSymbols('DCOILWTICO',src='FRED', from="2010-01-01", to="2016-02-15")
chartSeries(DCOILWTICO,  subset = '2016-01::2016-02')
DCOILWTICO["2016-01-01/2016-01-20"]
chartSeries(DCOILWTICO,  subset = '2015-01::2016-02')
chartSeries(DCOILWTICO,  subset = '2008-01::2016-02')
getSymbols(c("CLH16.NYM"),src='yahoo', from="2010-01-01", to="2016-02-15")
Source("Essai01.R")
source("Essai01.R")
source("Essai01.R")
library(knitr)
kable(head(mtcars[, 1:6]))
packageVersion("knitr")
update.packages()
knit("myFirst.Rnw")
knit("myFirst.rmd")
if (!require("shiny")) install.packages("shiny") demo("notebook", package = "knitr")
if (!require("shiny")) install.packages("shiny")
demo("notebook", package = "knitr")
stitch("anti_skimming_measurement.R")
install.packages("LaTeX")
install.packages("miktex")
install.packages("LaTeX")
stitch("anti_skimming_measurement.R")
stitch("anti_skimming_measurement.R")
cd prose
set.seed(4321)
cd prose
set.seed(4321)
permute <- sample(1:150, 150)
splits <- rep(1:3, 50)
irisSplit <- tapply(permute, splits, function(x){ iris[x, c("Sepal.Length", "Species")]})
irisSplit
?tapply
read.csv("activity.csv", stringsAsFactors = FALSE)
activities <- read.csv("activity.csv", stringsAsFactors = FALSE)
head(activities)
plot(activities$interval)
?plot
plot(activities$interval)
plot(activities$step)
with(activities, plot(step, interval)
)
with(activities, plot(step, interval))
?with
with(activities, plot(step, interval))
with(activities, plot(step ~interval))
with(activities, plot(step ~ interval))
with(activities, plot(step, interval))
?plot
plot(activities$step, activities*interval))
plot(activities$step, activities$interval))
plot(activities$step, activities$interval)
plot(activities$interval, activities$steps)
head(activities)
plot(activities$date, activities$steps)
plot(as.Date(activities$date), activities$steps)
dailySteps <- tapply(activities$steps, as.date(activities$date), sum)
dailySteps <- tapply(activities$steps, activities$date, sum)
head(dailyStep)
head(dailySteps)
plot(dailySteps)
plot(dailySteps, lty = 'l')
plot(dailySteps, type = 'l')
plot(dailySteps, type = 'l', lty = 2)
plot(dailySteps, type = 'l', lty = 4)
plot(dailySteps, type = 'l', lty = 5)
plot(dailySteps, type = 'l', lty = 8)
plot(dailySteps, type = 'l', lty = 8)
plot(dailySteps, type = 'l', lty = 2)
plot(dailySteps, type = 'l')
plot(dailySteps, type = 'l')
abline(h = mean(dailySteps))
abline(h = mean(dailySteps))
groupby
group_by
library(ggplot2)
groupby
group_by
by_group
group_by()
library(dplyt)
library(dplyr)
group_by()
dailySteps <- group_by(activities, date)
dailySteps
dailySteps %>% summarise_each(sum)
dailySteps %>% summarise_each(funs(sum)
)
dailySteps %>% summarise_each(funs(sum))
dailySteps %>% summarise_each(mean(sum))
dailySteps %>% summarise_each(funs(mean)
)
dailySteps %>% summarise(funs(sum))
dailySteps %>% summarise(steps,funs(sum))
View(dailySteps)
dailySteps <- tapply(activities$steps, as.date(activities$date), sum)
dailySteps <- tapply(activities$steps, activities$date, sum)
head(dailySteps)
dailySteps <- group_by(activities, date)
str(dailySteps)
dim(dailySteps)
head(dailySteps)
dailySteps
class(dailySteps)
dailySteps %>% summarise(daily = sum(steps))
plot(as.Date(dailySteps$date), dailySteps$steps)
daily <- dailySteps %>% summarise(daily = sum(steps))
plot(as.Date(daily$date), daily$steps)
plot(as.Date(daily$date), daily$daily)
plot(as.Date(daily$date), daily$daily , type="l")
points(as.Date(daily$date), daily$daily)
daily$date[1]
class(daily$date[1])
daily$date <- as.Date(daily$date)
class(daily$date[1])
weekdays(daily$date[1])
daily[weekdays(daily$date) == "Sunday", ]
sundays <- daily[weekdays(daily$date) == "Sunday", ]
sundays <- weekdays(daily$date) == "Sunday"
sundays
sundays <- daily[weekdays(daily$date) == "Sunday", ]
abline(v = sundays$date)
daily
daily <- dailySteps %>% summarise(daily = sum(steps), dailyMean = mean(steps), dailyMedian = median(steps))
daily
daily
mean(daily$daily))
mean(daily$daily)
mean(daily$daily, na.rm = TRUE)
median(daily$daily, na.rm = TRUE)
abline(h = mean(daily$daily, na.rm = TRUE))
intervalSteps <- group_by(activities, interval)
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps), intervalMean = mean(steps), intervalMedian = median(steps))
interval
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps, NA.rm = TRUE), intervalMean = mean(steps, NA.rm = TRUE), intervalMedian = median(steps, na.rm = TRUE))
interval
intervalSteps
sum(intervalSteps)
sum(intervalSteps$steps)
sum(intervalSteps$steps, NA.rm = TRUE)
sum(intervalSteps$steps
)
intervalSteps$steps
head(intervalSteps$steps)
head(intervalSteps)
View(intervalSteps)
head(intervalSteps)
intervalSteps[interval = 5,]
intervalSteps[interval == 5,]
intervalSteps[intervalSteps$interval == 5,]
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps, NA.rm = TRUE), intervalMean = mean(steps, NA.rm = TRUE), intervalMedian = median(steps, na.rm = TRUE))
interval
View(interval)
View(interval)
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps), intervalMean = mean(steps), intervalMedian = median(steps, na.rm = TRUE))
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps), intervalMean = mean(steps), intervalMedian = median(steps, na.rm = TRUE))
sum(intervalTotal$steps)
sum(intervalSteps$steps)
sum(intervalSteps$steps, NA.rm = TRUE)
View(intervalSteps)
View(intervalSteps)
mean(intervalSteps$steps, NA.rm = TRUE)
mean(as.numeric(intervalSteps$steps), NA.rm = TRUE)
mean(as.numeric(intervalSteps$steps), na.rm = TRUE)
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps, na.rm = TRUE), intervalMean = mean(steps, na.rm = TRUE), intervalMedian = median(steps, na.rm = TRUE))
View(intervalSteps)
View(interval)
plot(interval$interval, interval$mean)
plot(interval$interval, interval$intervalMean)
plot(interval$interval, interval$intervalMean, type = 'l')
as.POSIXct(interval$interval, format="%M")
dminutes(interval$interval)
library(lubridate)
dminutes(interval$interval)
as.Date(dminutes(interval$interval))
dminutes(interval$interval)
dminutes(interval$interval[1])
dminutes(interval$interval[2])
class(dminutes(interval$interval[2]))
class(minutes(interval$interval[2]))
minutes(interval$interval[2])
hms("0:0:0")
class(hms("0:0:0"))
minutes(interval$interval[])
interval$inteval <- minutes(interval$interval)
plot(interval$interval, interval$intervalMean, type = 'l')
interval$inteval <- interval$interval + hms("0:0:0")
interval
interval$interval + hms("0:0:0")
interval$interval %+% hms("0:0:0")
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps, na.rm = TRUE), intervalMean = mean(steps, na.rm = TRUE), intervalMedian = median(steps, na.rm = TRUE))
interval$interval %+% hms("0:0:0")
interval$interval + hms("0:0:0")
minutes(interval$interval)
minutes_to_period(1000)
interval$inteval <- seconds_to_period(60 * interval$interval)
interval$interval <- seconds_to_period(60 * interval$interval)
plot(interval$interval, interval$intervalMean, type = 'l')
interval$interval
interval <- intervalSteps %>% summarise(intervalTotal = sum(steps, na.rm = TRUE), intervalMean = mean(steps, na.rm = TRUE), intervalMedian = median(steps, na.rm = TRUE))
interval$interval <- as.Date(interval$interval, "hhmm")
interval$interval <- as.Date(interval$interval, format("hhmm")
)
interval$interval <- as.date(interval$interval, "%h%m")
interval$interval <- as.Date(interval$interval, "%h%m")
interval$interval
interval$interval <- as.Date(as.character(interval$interval, "%h%m"))
as.character(interval$interval)
as.Date(as.character(interval$interval), "h%M")**
as.Date(as.character(interval$interval), "h%M")*
as.Date(as.character(interval$interval), "h%M")
as.Date(as.character(interval$interval), "h%M")
as.Date(as.character(interval$interval), "H%M")
as.Date(as.character(interval$interval), "%H%M")
as.Date(as.character(interval$interval), "%h%m")
as.Date(as.character(interval$interval), "%H%M")
as.Date(as.character(interval$interval), "%H%m")
as.Date(as.character(interval$interval), "%h%m")
as.character(interval$interval), "%h%m"
as.character(interval$interval)
cbind(interval, hour = interval$interval%100)
cbind(interval, interval$interval%100)
interval$interval%100
cbind(interval, interval$interval%%100)
cbind(interval, minutes = interval$interval%%100)
cbind(interval, hours = interval$interval/100, minutes = interval$interval%%100)
intervalhours = interval$interval/100, minutes = interval$interval%%100)
interval$hours = interval$interval//100
interval$hours = interval$interval/100
interval$hours = interval$interval%/%100
interval
cbind(interval, minutes = interval$interval%%100)
interval <- cbind(interval, minutes = interval$interval%%100)
interval$interval <- as.Date
interval <- cbind(interval, time = parse(as.character(interval$hours), as.character(interval$minutes) ))
parse(as.character(interval$hours), as.character(interval$minutes)))
parse(as.character(interval$hours), as.character(interval$minutes))
parse(as.character(interval$hours[1]), as.character(interval$minutes[1]))
parse("x", "y")
interval <- cbind(interval, time = paste(as.character(interval$hours), as.character(interval$minutes) ))
interval <- cbind(interval, time = paste(as.character(interval$hours), as.character(interval$minutes), sep = ""))
interval <- interval[, -c(interval$interval)]
interval[, -c(interval$interval)]
interval[, -c(interval$time)]
interval[, c(interval$time)]
interval$time
interval$time.1 <- NULL
interval$time <- as.character(interval$time)
interval$time <- as.Date(interval$time, "%h%m")
as.Date("0 20", "%h%m")
as.Date("0 20", "%h %m")
as.Date("0 20", "%H %M")
as.DateTIME("0 20", "%H %M")
interval$time <- NULL
interval <- cbind(interval, time = paste(as.character(interval$hours), as.character(interval$minutes), sep = ":"))
cbind(interval, hours = interval$interval/100,)
cbind(interval, hours = interval$interval/100)
interval <- cbind(interval, hours = interval$interval/100)
interval$hours <- NULL
interval <- cbind(interval, hours = interval$interval%/%100)
interval
interva$time <- paste(as.character(interval$hours), as.character(interval$minutes) )
interval$time <- paste(as.character(interval$hours), as.character(interval$minutes) )
interval$time <- paste(as.character(interval$hours), as.character(interval$minutes, sep = ":") )
interval$time <- paste(as.character(interval$hours), as.character(interval$minutes), sep = ":" )
strptime(interval$time, "%H:%M")
interval$time <- strptime(interval$time, "%H:%M")
plot(interval$time, interval$intervalMean)
plot(interval$time, interval$intervalMean, type = "l")
hist(daily)
hist(daily$daily)
hist(daily$date)
hist(as.Date(daily$date))
hist(as.Date(daily$date), "weeks")
hist(as.Date(daily$date), "weeks", dailySteps     )
hist(as.Date(daily$date), "weeks", dailySteps)
hist(as.Date(daily$date) ~ daily$dailySteps, "weeks")
hist(as.Date(daily$date), "weeks", daily$daily)
hist?
?
)
?hist
hist(as.Date(daily$step), "weeks", daily$daily)
hist(as.Date(daily$date), "weeks", y = daily$daily)
?hist
hist(daily$daily)
hist(daily$daily ~ daily$date)
hist(daily$daily freq = FALSE)
hist(daily$daily, freq = FALSE)
hist(daily$date, freq = FALSE)
hist(as.Date(daily$date), freq = FALSE)
hist(as.Date(daily$date), "weeks" freq = FALSE)
hist(as.Date(daily$date), "weeks", freq = FALSE)
plot(as.Date(daily$date), daily$daily, type ="h")
barplot(as.Date(daily$date), daily$daily)
ls
interval
barplot(as.Date(daily$date), daily$daily)
plot(as.Date(daily$date), daily$daily, type ="h")
plot(as.Date(daily$date), daily$daily, type ="l")
plot(as.Date(daily$date), daily$daily, type ="i")
plot(as.Date(daily$date), daily$daily, type ="x")
plot(as.Date(daily$date), daily$daily, type ="k")
plot(as.Date(daily$date), daily$daily)
plot(as.Date(daily$date), daily$daily, "l")
points(as.Date(daily$date), daily$daily)
ask
size(ask)
length(ask)
length(ask[,1])
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
source("anti_skimming_measurement.R")
setwd("C:/Users/")
setwd("C:/Users/Thomas MARTIN/RepData/")
dir(
)
myedit "PA1_template.Rmd"
myedit PA1_template.Rmd
data
source("step_measurement.R")
?function
()
)
source("step_measurement.R")
View(activities)
View(activities)
View(activities)
View(activities)
getWeekPeriod(addActivities$date)
